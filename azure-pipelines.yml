trigger:
  branches:
    include:
      - main

variables:
  buildConfiguration: "Release"
  frontendAppName: "realityFightsReactApp"
  backendAppName: "realityFightsDotnetApp"

stages:
  # ----------------- BUILD STAGE -----------------
  - stage: Build
    displayName: "Build Frontend and Backend"
    jobs:
      - job: BuildFrontend
        displayName: "Build React Frontend"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
            displayName: "Install Node.js"

          - script: |
              cd client
              npm install
              npm run build
            displayName: "Build React App"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: "$(System.DefaultWorkingDirectory)/client/dist"
              artifactName: "frontend"
              publishLocation: "Container"

      - job: BuildBackend
        displayName: "Build .NET Backend"
        pool:
          vmImage: "windows-latest"
        steps:
          - task: UseDotNet@2
            inputs:
              # packageType: "sdk"
              version: "8.0.x"
              # installationPath: $(Agent.ToolsDirectory)/dotnet

          - task: DotNetCoreCLI@2
            inputs:
              command: "restore"
              projects: "**/*.csproj"

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "**/*.csproj"
              arguments: "--configuration Release"

          - task: DotNetCoreCLI@2
            inputs:
              command: "publish"
              publishWebProjects: true
              arguments: "--configuration Release --output $(Build.ArtifactStagingDirectory)"
              zipAfterPublish: true

          - task: PowerShell@2
            displayName: "Rename published zip to backend.zip"
            inputs:
              targetType: "inline"
              script: |
                $zip = Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Filter *.zip | Select-Object -First 1
                if ($zip) {
                  Rename-Item -Path $zip.FullName -NewName "backend.zip"
                } else {
                  Write-Error "No zip file found to rename."
                }

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: "$(Build.ArtifactStagingDirectory)"
              artifactName: "backend"
              publishLocation: "Container"

          - script: |
              echo "Pipeline.Workspace: $(Pipeline.Workspace)"
              echo "Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)"
              echo "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
            displayName: "Debug: Print Path Variables"

          # - script: |
          #     cd server
          #     dotnet restore
          #     dotnet build --configuration $(buildConfiguration)
          #     dotnet publish --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
          #   displayName: "Build .NET App"

          # - script: dotnet --version
          #   displayName: "Check .NET SDK Version"

          # - task: ArchiveFiles@2
          #   inputs:
          #     rootFolderOrFile: "$(Build.ArtifactStagingDirectory)"
          #     includeRootFolder: false
          #     archiveType: "zip"
          #     archiveFile: "$(Build.ArtifactStagingDirectory)/backend.zip"
          #     replaceExistingArchive: true

          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     pathToPublish: "$(Build.ArtifactStagingDirectory)/backend.zip"
          #     artifactName: "backend"
          #     publishLocation: "Container"

    # ----------------- DEPLOY BACKEND -----------------
  - stage: DeployBackend
    displayName: "Deploy .NET Backend"
    dependsOn: Build

    pool:
      vmImage: "windows-latest"
    jobs:
      - deployment: DeployBackend
        environment: "backend-env"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: backend

                - script: |
                    echo "Checking contents of backend artifacts:"
                    dir "$(Pipeline.Workspace)/backend" -Recurse
                  displayName: "Debug: List backend artifact contents"

                - script: |
                    if (!(Test-Path "$(Pipeline.Workspace)/backend/backend.zip")) {
                      Write-Error "backend.zip not found!"
                    }
                  displayName: "Verify backend.zip exists"
                  failOnStderr: true

                - task: AzureRmWebAppDeployment@4
                  inputs:
                    ConnectionType: "AzureRM"
                    azureSubscription: "AzureRMConnection"
                    appType: "webApp"
                    WebAppName: $(backendAppName)
                    packageForWindows: "$(Pipeline.Workspace)/backend/backend.zip"
    #             - download: current
    #               artifact: backend

    #             - task: AzureWebApp@1
    #               inputs:
    #                 azureSubscription: "AzureRMConnection"
    #                 appType: "webApp"
    #                 appName: $(backendAppName)
    #                 package: "$(Pipeline.Workspace)/backend/backend.zip"

  # ----------------- DEPLOY FRONTEND -----------------
  - stage: DeployFrontend
    displayName: "Deploy React Frontend"
    dependsOn: Build
    jobs:
      - deployment: DeployFrontend
        environment: "frontend-env"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: frontend

                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: "AzureRMReactConnection"
                    appType: "webApp"
                    appName: $(frontendAppName)
                    package: "$(Pipeline.Workspace)/frontend"
