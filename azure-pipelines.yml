trigger:
  branches:
    include:
      - main

variables:
  buildConfiguration: "Release"
  frontendAppName: "realityFightsReactApp"
  backendAppName: "realityFightsDotnetApp"
  azureSubscription: "AzureRMConnection"

stages:
  # ----------------- BUILD STAGE -----------------
  - stage: Build
    displayName: "Build Frontend and Backend"
    jobs:
      - job: BuildFrontend
        displayName: "Build React Frontend"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
            displayName: "Install Node.js"

          - script: |
              cd client
              npm install
              npm run build
            displayName: "Build React App"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: "$(System.DefaultWorkingDirectory)/client/dist"
              artifactName: "frontend"
              publishLocation: "Container"

      - job: BuildBackend
        displayName: "Build .NET Backend"
        pool:
          vmImage: "windows-latest"
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "9.0.x"
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - script: |
              cd server
              dotnet restore
              dotnet build --configuration $(buildConfiguration)
              dotnet publish --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/server
            displayName: "Build .NET App"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: "$(Build.ArtifactStagingDirectory)/server"
              artifactName: "backend"
              publishLocation: "Container"

    # ----------------- DEPLOY BACKEND -----------------
  - stage: DeployBackend
    displayName: "Deploy .NET Backend"
    dependsOn: Build
    jobs:
      - deployment: DeployBackend
        environment: "backend-env"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: backend

                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: $(azureSubscription)
                    appType: "webApp"
                    appName: $(backendAppName)
                    package: "$(Pipeline.Workspace)/backend"

  # ----------------- DEPLOY FRONTEND -----------------
  - stage: DeployFrontend
    displayName: "Deploy React Frontend"
    dependsOn: Build
    jobs:
      - deployment: DeployFrontend
        environment: "frontend-env"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: frontend

                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: $(azureSubscription)
                    appType: "webApp"
                    appName: $(frontendAppName)
                    package: "$(Pipeline.Workspace)/frontend"
